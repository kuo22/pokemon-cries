{"version":3,"sources":["App.js","serviceWorker.js","index.js","speaker.svg"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setPlay","setState","playing","setNoPlay","checkRecord","score","state","record","document","cookie","parseInt","name","v","match","getCookie","Number","isNaN","comp","react_default","a","createElement","App_Play","App_Intro","className","id","href","React","Component","Intro","onClick","Play","_this2","generateChoices","choices","length","num","Math","floor","random","includes","push","setChoices","answer","checkAnswer","e","target","gameOver","createImages","map","val","index","img_path","concat","process","key","src","alt","playAudio","cry","current","play","restart","createRef","wav_path","App_Result","ref","speaker","Result","Boolean","window","location","hostname","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.e0f08147.chunk.js","sourcesContent":["import React from 'react';\nimport speaker from './speaker.svg';\nimport './App.css';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        let record = parseInt(getCookie(\"record\"));\n        if (Number.isNaN(record)) {\n            record = 0;\n        }\n        this.state = {\n            playing: false,\n            record: record\n        };\n    }\n\n    setPlay = () => {\n        this.setState({playing: true});\n    }\n\n    setNoPlay = () => {\n        this.setState({playing: false});\n    }\n\n    checkRecord = (score) => {\n        if (score > this.state.record) {\n            this.setState({record: score});\n            document.cookie = \"record=\" + score;\n        }\n    }\n\n    render() {\n        let comp;\n        if (!this.state.playing)\n            comp = <Intro record={this.state.record} setPlay={this.setPlay} />;\n        else\n            comp = <Play checkRecord={this.checkRecord} setNoPlay={this.setNoPlay} />;\n        return (\n            <div className=\"App\">\n                <h1>Pokemon Cries Challenge</h1>\n                <div id=\"content-wrap\">\n                    {comp}\n                </div>\n                <footer>\n                    <span>\n                        Made by <a href=\"https://github.com/kuo22\">Kuo</a>\n                    </span>\n                </footer>\n            </div>\n        );\n    }\n}\n\nclass Intro extends React.Component {\n    render() {\n        return(\n            <div id=\"menu\">\n                <p>Guess the Pokemon by its cry!</p>\n                <p>Your record is {this.props.record}.</p>\n                <button onClick={this.props.setPlay}>Start!</button>\n            </div>\n        )\n    }\n}\n\nclass Play extends React.Component {\n    constructor(props) {\n        super(props);\n        let choices = this.generateChoices();\n        this.state = {\n            score: 0,\n            choices: choices,\n            answer: choices[Math.floor(Math.random() * 3)],\n            gameOver: false\n        };\n        this.cry = React.createRef();\n    }\n\n    generateChoices = () => {\n        let choices = [];\n        while (choices.length < 3) {\n            let num = Math.floor(Math.random() * 151) + 1;\n            if (!choices.includes(num)) {\n                choices.push(num);\n            }\n        }\n        return choices;\n    }\n\n    setChoices = () => {\n        let choices = this.generateChoices();\n        this.setState({\n            choices: choices,\n            answer: choices[Math.floor(Math.random() * 3)]\n        });\n    }\n\n    checkAnswer = (e) => {\n        if (parseInt(e.target.id) === this.state.answer) {\n            this.setChoices();\n            this.setState((state) => ({ score: state.score + 1 }));\n        } else {\n            this.setState({gameOver: true});\n        }\n    }\n\n    createImages = () => {\n        return this.state.choices.map((val, index) => {\n            const img_path = `${process.env.PUBLIC_URL}/sprites/${val}.png`;\n            return <img id={val} className=\"choices\" key={index} src={img_path} alt=\"random pokemon\" onClick={this.checkAnswer} />\n        });\n    }\n\n    playAudio = () => {\n        this.cry.current.play();\n    }\n\n    restart = () => {\n        this.setChoices();\n        this.setState({\n            gameOver: false,\n            score: 0\n        });\n    }\n\n    render() {\n        let wav_path = `${process.env.PUBLIC_URL}/cries/${this.state.answer}.wav`;\n        if (this.state.gameOver) {\n            return <Result score={this.state.score} checkRecord={this.props.checkRecord} restart={this.restart} />\n        }\n        return(\n            <div className=\"play\">\n                <audio id=\"cry\" ref={this.cry} src={wav_path}></audio>\n                <div id=\"speaker\">\n                    <img src={speaker} alt=\"answer\" onClick={this.playAudio} />\n                </div>\n                <div id=\"choices\">\n                    { this.createImages() }\n                </div>\n                <div>\n                    <p id=\"score\">{this.state.score}</p>\n                </div>\n                <button onClick={this.props.setNoPlay}>Quit</button>\n            </div>\n        );\n    }\n}\n\nclass Result extends React.Component {\n    componentDidMount() {\n        this.props.checkRecord(this.props.score);\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <h2>Game Over!</h2>\n                    <p>You got {this.props.score} points.</p>\n                </div>\n                <div>\n                    <button onClick={this.props.restart}>Restart</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction getCookie(name) {\n    var v = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');\n    return v ? v[2] : null;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/speaker.c74a590b.svg\";"],"sourceRoot":""}